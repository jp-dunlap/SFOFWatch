<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SFOF Watch | The Network of Influence</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Lora:wght@400;600&family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --background-dark: #0a0a0a;
            --background-light: #111827;
            --primary-cyan: #22d3ee;
            --text-primary: #EAEAEA;
            --text-secondary: #9ca3af;
            --border-color: #374151;
        }

        html {
            scroll-behavior: smooth;
        }

        body {
            background-color: var(--background-dark);
            color: var(--text-primary);
            font-family: 'Inter', sans-serif;
        }

        h1, h2, h3, .font-lora {
            font-family: 'Lora', serif;
        }

        .hero-bg {
            background-color: var(--background-dark);
            background-image: 
                radial-gradient(circle at 25% 30%, rgba(22, 44, 78, 0.4), transparent 40%),
                radial-gradient(circle at 75% 70%, rgba(34, 211, 238, 0.1), transparent 40%);
            position: relative;
            overflow: hidden;
        }
        
        .hero-bg::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 80 80" width="80" height="80"><path fill="%23111827" fill-opacity="0.1" d="M0 0h40v40H0zM40 40h40v40H40z"></path></svg>');
            z-index: 0;
        }

        /* D3 Graph Styles */
        #network-graph {
            background-color: rgba(17, 24, 39, 0.5); /* bg-gray-900 with opacity */
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
        }
        .links line {
            stroke: #6b7280; /* gray-500 */
            stroke-opacity: 0.6;
        }
        .nodes circle {
            stroke: #fff;
            stroke-width: 1.5px;
            cursor: pointer;
        }
        .node-label {
            font-family: 'Inter', sans-serif;
            font-size: 12px;
            fill: var(--text-secondary);
            pointer-events: none;
        }

        /* Scroll animation styles */
        .reveal {
            position: relative;
            opacity: 0;
            transform: translateY(50px);
            transition: opacity 0.6s ease-out, transform 0.6s ease-out;
        }

        .reveal.active {
            opacity: 1;
            transform: translateY(0);
        }
    </style>
</head>
<body class="antialiased">

    <!-- Header Section -->
    <header class="sticky top-0 z-50 bg-black/30 backdrop-blur-md border-b border-gray-800">
        <div class="container mx-auto px-6 py-4 flex justify-between items-center">
            <a href="index.html" class="text-2xl font-semibold font-lora tracking-wider">SFOF<span class="text-cyan-400">Watch</span></a>
            <nav class="hidden md:flex items-center space-x-8">
                <a href="foundation.html" class="hover:text-cyan-400 transition-colors">The Foundation</a>
                <a href="network.html" class="text-cyan-400 font-bold">The Network</a>
                <a href="playbook.html" class="hover:text-cyan-400 transition-colors">The Playbook</a>
                <a href="atlas.html" class="hover:text-cyan-400 transition-colors">The Atlas</a>
                <a href="data.html" class="hover:text-cyan-400 transition-colors">Data & Methodology</a>
                <!-- Search Form -->
                <form action="search.html" method="get" class="relative">
                    <input type="search" name="q" placeholder="Search..." class="bg-gray-800 border border-gray-700 rounded-full py-1 px-4 text-sm text-white focus:outline-none focus:border-cyan-400" />
                    <button type="submit" class="absolute right-2 top-1/2 -translate-y-1/2 text-gray-400">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>
                    </button>
                </form>
            </nav>
        </div>
    </header>

    <main>
        <!-- Hero Section -->
        <section class="text-center px-6 pt-32 pb-24 hero-bg">
            <div class="max-w-4xl mx-auto relative z-10">
                <h1 class="text-5xl md:text-6xl font-bold font-lora leading-tight mb-4">The Network</h1>
                <p class="text-lg md:text-xl text-gray-400 max-w-3xl mx-auto">
                    SFOF does not operate in a vacuum. It is the central node in a sophisticated and well-funded network of conservative think tanks, corporate lobbyists, and legal organizations working in concert to achieve a unified political agenda. Drag and explore the nodes below.
                </p>
            </div>
        </section>

        <!-- Interactive Network Graph Section -->
        <section class="container mx-auto px-6 py-16 md:py-24">
            <div id="network-graph" class="mx-auto" style="width: 100%; max-width: 960px; height: 600px; position: relative;"></div>
        </section>
    </main>

    <footer class="border-t border-gray-800 py-12 px-6 mt-16">
        <div class="container mx-auto text-center text-gray-500">
            <p>&copy; 2025 SFOFWatch.org. This is an open-source intelligence project.</p>
            <p class="mt-2">Content is provided for research and informational purposes under the AGPL-3.0 license.</p>
            <div class="mt-4">
                <a href="https://github.com/jp-dunlap/SFOFWatch" target="_blank" class="text-cyan-400 hover:underline">Contribute on GitHub</a>
            </div>

            <!-- ===== START: NETLIFY FORM ===== -->
            <div class="max-w-xl mx-auto mt-12 text-left">
                <h3 class="text-2xl font-lora font-semibold text-center mb-3 text-cyan-400">Contact the Project</h3>
                <p class="text-gray-400 mb-6 text-center">
                    Have a tip, correction, or question? All submissions are secure and confidential.
                </p>
                <form name="contact" method="POST" data-netlify="true">
                    <div class="mb-4">
                        <label class="block text-gray-400 mb-2" for="name">Name (Optional)</label>
                        <input class="w-full bg-gray-900 border border-gray-700 rounded-md py-2 px-3 text-white focus:outline-none focus:border-cyan-400" type="text" name="name" id="name" />
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-400 mb-2" for="email">Email (Optional)</label>
                        <input class="w-full bg-gray-900 border border-gray-700 rounded-md py-2 px-3 text-white focus:outline-none focus:border-cyan-400" type="email" name="email" id="email" />
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-400 mb-2" for="message">Message</label>
                        <textarea class="w-full bg-gray-900 border border-gray-700 rounded-md py-2 px-3 text-white focus:outline-none focus:border-cyan-400" name="message" id="message" rows="4" required></textarea>
                    </div>
                    <div class="text-center">
                        <button class="inline-block bg-cyan-400 text-black font-bold px-8 py-3 rounded-lg hover:bg-cyan-300 transition-colors" type="submit">Send Message</button>
                    </div>
                </form>
            </div>
            <!-- ===== END: NETLIFY FORM ===== -->

        </div>
    </footer>

    <!-- D3.js Library and Visualization Script -->
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <script>
        const graph = {{ sfof_network | dump | safe }};

        document.addEventListener('DOMContentLoaded', () => {
            const graphContainer = document.getElementById('network-graph');
            if (graphContainer) {
                const width = graphContainer.offsetWidth;
                const height = 600;

                const svg = d3.select("#network-graph").append("svg")
                    .attr("width", "100%")
                    .attr("height", "100%")
                    .attr("viewBox", `0 0 ${width} ${height}`);

                const color = d3.scaleOrdinal()
                    .domain(["organization", "donor", "person"])
                    .range(["#22d3ee", "#a3e635", "#f87171"]); // Cyan, Lime, Red

                const simulation = d3.forceSimulation()
                    .force("link", d3.forceLink().id(d => d.id).distance(120).strength(0.5))
                    .force("charge", d3.forceManyBody().strength(-250))
                    .force("center", d3.forceCenter(width / 2, height / 2));

                Promise.resolve(graph).then(function(graph) {
                    if (!graph || !graph.nodes || !graph.edges) {
                        throw new Error("Data is not in the expected format or is missing.");
                    }

                    const link = svg.append("g")
                        .attr("class", "links")
                        .selectAll("line")
                        .data(graph.edges)
                        .enter().append("line");

                    const node = svg.append("g")
                        .attr("class", "nodes")
                        .selectAll("g")
                        .data(graph.nodes)
                        .enter().append("g")
                        .call(d3.drag()
                            .on("start", dragstarted)
                            .on("drag", dragged)
                            .on("end", dragended));

                    node.append("circle")
                        .attr("r", 12)
                        .attr("fill", d => color(d.type));

                    node.append("text")
                        .attr("class", "node-label")
                        .attr("x", 18)
                        .attr("y", 4)
                        .text(d => d.label);

                    node.append("title")
                        .text(d => `${d.label}\nType: ${d.type}`);

                    simulation
                        .nodes(graph.nodes)
                        .on("tick", ticked);

                    simulation.force("link")
                        .links(graph.edges);

                    function ticked() {
                        link
                            .attr("x1", d => d.source.x)
                            .attr("y1", d => d.source.y)
                            .attr("x2", d => d.target.x)
                            .attr("y2", d => d.target.y);
                        node
                            .attr("transform", d => `translate(${d.x},${d.y})`);
                    }
                }).catch(function(error) {
                    console.error("Error loading the network data:", error);
                    graphContainer.innerHTML = `<div class="text-red-400 text-center p-8">Failed to load network data. Please check the browser console and ensure '_data/sfof_network.json' exists and is correctly formatted.</div>`;
                });

                function dragstarted(d) {
                    if (!d3.event.active) simulation.alphaTarget(0.3).restart();
                    d.fx = d.x;
                    d.fy = d.y;
                }

                function dragged(d) {
                    d.fx = d3.event.x;
                    d.fy = d3.event.y;
                }

                function dragended(d) {
                    if (!d3.event.active) simulation.alphaTarget(0);
                    d.fx = null;
                    d.fy = null;
                }
            }
            
            // Original Scroll Reveal Animation
            const revealElements = document.querySelectorAll('.reveal');
            if (revealElements.length > 0) {
                const revealObserver = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.classList.add('active');
                        }
                    });
                }, { threshold: 0.1 });

                revealElements.forEach(el => {
                    revealObserver.observe(el);
                });
            }
        });
    </script>

</body>
</html>
